package com.dhcc.framework.test;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

/**
 * blh单元测试类生成器
 * 
 * @author 黎乐乔[joe7bit@163.com]
 */
public class BlhTestCodeGenerator extends AnnoParameterParser {

    /**
     * 根据解析的参数和blh方法生成单元测试
     */
    public void generateBlhTestCode() {
        BlhTestCodeGenerator.parseParams(preParseMap);
        System.err.println(parsedParamsMap.entrySet());
        if(parsedParamsMap.entrySet().size() > 0) {
            Iterator<Entry<String, Map<String, List<Map<String, String>>>>> entries = parsedParamsMap.entrySet().iterator();
            while(entries.hasNext()) {
                Entry<String, Map<String, List<Map<String, String>>>> entry = entries.next();
                StringBuffer code = new StringBuffer();
                String packageName = entry.getKey();
                String outputPackage = packageName.substring(0, packageName.lastIndexOf('.')).replace(".ws.", ".blh.").replace("com.dhcc.", "com.dhcc.test.");
                String blhPackName = preParseMap.get(packageName)[0].getName();
                String dtoPackName = preParseMap.get(packageName)[2].getName();
                String blhClassName = blhPackName.substring(blhPackName.lastIndexOf('.')+1);
                String dtoClassName = dtoPackName.substring(dtoPackName.lastIndexOf('.')+1);
                String entityName = dtoClassName.substring(0, dtoClassName.indexOf("Dto"));
                String outFileName = blhClassName + "Test";
                code.append("package " + outputPackage + ";\n\n");
                code.append("import javax.annotation.Resource;\n");
                code.append("import org.junit.Test;\n");
                code.append("import org.junit.Assert;\n");
                code.append("import org.springframework.test.annotation.Rollback;\n");
                code.append("import "+ blhPackName + ";\n");
                code.append("import "+ dtoPackName + ";\n");
                code.append("import com.dhcc.framework.transmission.event.BusinessRequest;\n");
                code.append("import com.dhcc.framework.test.AbstractBaseTransactionalSpringContextTest;\n\n");
                code.append("/**\n");
                code.append(" * @author auto-generated by AnnoParameterParser\n");
                code.append(" * @timestamp " + (new java.sql.Timestamp(System.currentTimeMillis()).toString()) + "\n");
                code.append(" */\n");
                code.append("public class " + outFileName + " extends AbstractBaseTransactionalSpringContextTest {\n\n");
                code.append("    @Resource\n");
                code.append("    private " + blhClassName + " blh;\n\n");
                Iterator<Map.Entry<String,List<Map<String,String>>>> methods = entry.getValue().entrySet().iterator();
                while(methods.hasNext()) {
                    Entry<String, List<Map<String, String>>> method = methods.next();
                    String returnType = method.getValue().get(1).get("RETURN_TYPE");
                    String valuesString = method.getValue().get(3).get("testvalues");
                    String[] values = valuesString.split(";");
                    Iterator<Entry<String, String>> params = method.getValue().get(0).entrySet().iterator();
                    String methodParameters = "";
                    StringBuffer core = new StringBuffer();  //循环拼接核心代码
                    StringBuffer parm = new StringBuffer();  //传入的实参列代码
                    String[] paramNameArray = null;
                    String[] paramTypeArray = null;
                    Map<String, Object> cache = new HashMap<String, Object>(); //回溯缓存标记
                    while(params.hasNext()) {
                        Entry<String, String> param = params.next();
                        String paramNameChain = param.getKey();
                        String paramTypeChain = param.getValue();
                        paramNameArray = paramNameChain.split("\\.");
                        paramTypeArray = paramTypeChain.split("\\|");
                        int len = paramNameArray.length;
                        for(int i=0; i<len-1; i++) {  //参数方法链路处理
                            if(cache.get(paramNameArray[i]) == null) {
                                core.append("        " + paramTypeArray[i] + " " + paramNameArray[i] + " = new " + correctType(paramTypeArray[i]) + "();\n");
                                if(paramTypeArray[i].startsWith("java.util.Map")) {
                                    core.append("        " + paramedType(paramTypeArray[i])[0] + " " + paramedName(paramedType(paramTypeArray[i])[0]) + " = new " + correctType(paramedType(paramTypeArray[i])[0]) + "();\n");
                                    core.append("        " + paramedType(paramTypeArray[i])[1] + " " + paramedName(paramedType(paramTypeArray[i])[1]) + " = new " + correctType(paramedType(paramTypeArray[i])[1]) + "();\n");
                                    if(cache.get(paramNameArray[i+1]) == null && i<len-2) {
                                        core.append("        " + paramTypeArray[i+1] + " " + paramNameArray[i+1] + " = new " + correctType(paramTypeArray[i+1]) + "();\n");
                                        cache.put(paramNameArray[i+1], "OBJECT");
                                    }
                                    core.append("        " + paramedName(paramedType(paramTypeArray[i])[1]) + ".set" + upperFirstChar(paramNameArray[i+1]) + "(" + paramNameArray[i+1] + ");\n");
                                    core.append("        " + paramNameArray[i] + ".put" + "(" + paramedName(paramedType(paramTypeArray[i])[0] + "," + paramedName(paramedType(paramTypeArray[i])[1] + ");\n")));
                                    cache.put(paramNameArray[i+1], "METHOD");
                                }
                                if(paramTypeArray[i].startsWith("java.util.Set") || paramTypeArray[i].startsWith("java.util.List")) {
                                    core.append("        " + paramedType(paramTypeArray[i])[0] + " " + paramedName(paramedType(paramTypeArray[i])[0]) + " = new " + correctType(paramedType(paramTypeArray[i])[0]) + "();\n");
                                    if(cache.get(paramNameArray[i+1]) == null && i<len-2) {
                                        core.append("        " + paramTypeArray[i+1] + " " + paramNameArray[i+1] + " = new " + correctType(paramTypeArray[i+1]) + "();\n");
                                        cache.put(paramNameArray[i+1], "OBJECT");
                                    }
                                    core.append("        " + paramedName(paramedType(paramTypeArray[i])[0]) + ".set" + upperFirstChar(paramNameArray[i+1]) + "(" + paramNameArray[i+1] + ");\n");
                                    core.append("        " + paramNameArray[i] + ".add" + "(" + paramedName(paramedType(paramTypeArray[i])[0] + ");\n"));
                                    cache.put(paramNameArray[i+1], "METHOD");
                                }
                                cache.put(paramNameArray[i], "OBJECT");
                            }
                        }
                        for(int j=1; j<len; j++) {
                            if(cache.get(paramNameArray[j]) == "METHOD") {
                                continue;
                            }
                            core.append("        " + paramNameArray[j-1] + ".set" + upperFirstChar(paramNameArray[j]) + "(" + paramNameArray[j] + ");\n");
                        }
                        methodParameters += paramTypeChain.substring(paramTypeChain.lastIndexOf('|')+1) + " " + paramNameChain.substring(paramNameChain.lastIndexOf('.')+1) + ", ";
                    }
                    methodParameters = methodParameters.substring(0, methodParameters.lastIndexOf(','));
                    String[] paramDefineLines = methodParameters.split(",");
                    for(int i=0; i<paramDefineLines.length; i++) {
                        String paramDefineLine = paramDefineLines[i].trim();
                        String paramClassName = paramDefineLine.split(" ")[0];
                        /**基本类型不能new，增加基本类型单独处理分支--add by jiatao 20140402-begin*/
                 /*     String indexString = "short,byte,int,long,float,double,char";
                        if(paramClassName != null && indexString.indexOf(paramClassName.trim()) !=-1 ){
                        	parm.append("        " + paramDefineLine + " = 123;\n");
                        }else if("boolean".equals(paramClassName)){
                        	parm.append("        " + paramDefineLine + " = false;\n");
                        }
                        else{
                        	parm.append("        " + paramDefineLine + " = new " + paramClassName +"();\n");
                        }*/
                        for(int m = 0; m < values.length;m++){
                        	if(values[m].split(",").length > 1){/**如果是对象*/
                        		parm.append("        " + paramDefineLine + " = new " + paramClassName +"();\n");
                        		String[] mu =  values[m].split(",");
                        		for(int k = 0 ; k <mu.length;k++){
                        			try {
										System.out.println("===1="+Class.forName(paramClassName).newInstance());
                        				for(int s = 0 ;s<Class.forName(paramClassName).newInstance().getClass().getDeclaredFields().length;s++){
                        					System.out.println(s+"==-=2="+Class.forName(paramClassName).newInstance().getClass().getDeclaredFields()[s].getGenericType());
                        				}
                        				System.out.println("==-=-3="+((Class.forName(paramClassName).newInstance().getClass().getDeclaredField(mu[k].split("=")[0]+""))));
										if("short,byte,int,long,float,double,char,boolean".indexOf(Class.forName(paramClassName).newInstance().getClass().getDeclaredField(mu[k].split("=")[0]+"").getGenericType().toString()) > 0 ){
											parm.append("        " + paramDefineLine.split(" ")[1] + ".set" + upperFirstChar(mu[k].split("=")[0]) +"("+((mu[k].split("=")[1]).split(":")[0])+");\n");
										}else{
											parm.append("        " + paramDefineLine.split(" ")[1] + ".set" + upperFirstChar(mu[k].split("=")[0]) +"(new "+(Class.forName(paramClassName).newInstance().getClass().getDeclaredField(mu[k].split("=")[0]+"").getGenericType()).toString().split(" ")[1]+"(\""+((mu[k].split("=")[1]).split(":")[0])+"\"));\n");
										}
									} catch (Exception e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
                        			//parm.append("        " + paramDefineLine.split(" ")[1] + ".set" + upperFirstChar(mu[k].split("=")[0]) +"("+((mu[k].split("=")[1]).split(":")[0])+");\n");
                        		}
                        	}else{/**如果是基本类型*/
                        		if(paramDefineLine.split(" ")[1].equals(values[m].split("=")[0])){
                        			if("short,byte,int,long,float,double,char,boolean".indexOf(paramDefineLine.split(" ")[0]) > 0){
                        				parm.append("        " + paramDefineLine + " = "+(values[m].split("=")[1].split(":")[0])+";\n");
                        			}else{
                        				parm.append("        " + paramDefineLine + " = new "+paramClassName+"(\""+(values[m].split("=")[1].split(":")[0])+"\");\n");
                        			}
                        		}
                        	}
                        }
                        /**基本类型不能new，增加基本类型单独处理分支--add by jiatao 20140402-end*/
                    }
                    code.append("    @Test\n");
                    code.append("    @Rollback(true)\n");
                    code.append("    public void " + method.getKey() + "() {\n\n");
                    code.append("        //请按业务实际情况设置所需的参数值进行测试\n" + parm.toString() + "\n");
                    code.append("        " + dtoClassName + " dto = new " + dtoClassName + "();\n");
                    code.append(core.toString());
                    code.append("        dto.set" + entityName + "(" + lowerFirstChar(entityName) + ");\n");
                    code.append("        BusinessRequest request = new BusinessRequest();\n");
                    code.append("        request.setDto(dto);\n\n");
                    code.append("        blh." + method.getKey() + "(request);\n");
                    if(returnType != "void") {
                        code.append("        Assert.assertNotNull(dto.getPageModel().getPageData());\n");
                    }
                    code.append("    }\n\n");
                }
                code.append("}");
                
                writeCodeFile("test", code.toString(), outputPackage, outFileName);
                logger.info("test codes generated to " + outputPackage);
                
            }
        } else {
            logger.error("there's nothing to generate. please check the annotations in blh and action.");
        }
    }
}